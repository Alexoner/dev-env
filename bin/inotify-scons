#!/bin/bash

################################################################################
# This script watches a directory for file 'modify event', and automatically
# compile targets with scons command.
# This is made possible by two tools: INOTIFY(watch) and NAMED PIPE
################################################################################

#script -q -c 'scons -uj`nproc` --with-caffe-gpu caffe_train=1 --with-opencv-version=3.2 --with-use-opencv-gpu-mat --with-gpu-cuda-version=cuda8 --with-tf-gpu --interactive' &

#$PID=`ps aux|grep $USER |grep scons |grep -v grep |awk '{print $2}'`
# usage: inotify-scons watch_directory [build target]

DIRECTORY=$1
PID=$2


program_exists() {
    local ret='0'
    command -v "$1" >/dev/null 2>&1 || { local ret='1'; }

    # fail on non-zero return value
    if [ "$ret" -ne 0 ]; then
        return 1
    fi

    return 0
}

# download and install inotifywait tool
if ! program_exists inotifywait
then
	echo "inotifywait needs to be installed first"
	mkdir -p /tmp && cd /tmp
	curl -LO "http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz"
	tar xfv inotify-tools-3.14.tar.gz
	cd inotify-tools-3.14
	./configure --prefix=$HOME/
	make install
	INOTIFYWAIT=$USER/bin/inotifywait
else 
	INOTIFYWAIT=inotifywait
fi

DATE=`date +'%Y-%m-%d_%H:%M:%s'`
NAMED_PIPE=/tmp/$DATE.pipe
# XXX: make First In First Out named pipe file, so that we can send text to stdin
# of a running process
# One of the key differences between regular pipes and named pipes is that 
# named pipes have a presence in the file system.
# https://serverfault.com/questions/407902/write-to-the-stdin-of-a-running-process-with-the-same-effect-behaviour-of-direct
mkfifo $NAMED_PIPE

# indefinitely read from the named pipe file, never send EOF to stdout
loop-cat() {
	while true
	do
		cat "$1"
	done
}

# will tailf pipe file do? NO... why?
cmd_atom="scons --with-caffe-gpu use_caffe_gpu=1 -uj`nproc` --with-gpu-cuda-version=cuda9 --with-opencv-version=3.2 --with-use-opencv-gpu-mat --with-cudnn-version=cudnn7 --with-trt-version=5.0"
#cmd_face_platform="scons -uj`nproc` release=0 license=0 use_caffe_gpu=1 --with-caffe-gpu --with-gpu-cuda-version=cuda9 --with-use-opencv-gpu-mat --with-opencv-version=3.2 --with-use-easy-rtsp --with-tf-gpu --with-cudnn-version=cudnn7 --with-trt-version=5.0"
cmd_face_platform="scons --with-caffe-gpu use_caffe_gpu=1 -uj`nproc` --with-gpu-cuda-version=cuda8   --with-opencv-version=3.2 --with-use-opencv-gpu-mat --with-cudnn-version=cudnn7 --with-trt-version=4.0"
cmd_cpu="scons -uj`nproc` --with-blas=mkl --with-mkldnn --with-no-reuse-blob"
#cmd_cpu="scons -uj`nproc` --with-stacktrace=perfect"
cmd="$cmd_atom --interactive"
#cmd="$cmd_face_platform --interactive"
#cmd="$cmd_cpu --interactive"
loop-cat $NAMED_PIPE | $cmd & # READ the text in FIFO file, and WRITE it to stdin of 'cmd'

BUILD_TARGET=${@:2} # ${@:1:2}: get slice of positional parameters, start index 1, length is 2
BUILD_TARGET=${BUILD_TARGET:-$1}

TIMESTAMP_LAST=0
## watch file change and notify and trigger action
# use inotifywait -m to loop
#$INOTIFYWAIT -mre modify,create,delete,move "$DIRECTORY" | while read path event file
$INOTIFYWAIT -mre modify "$DIRECTORY" | while read path event file
do
	if [[ "$file" =~ .*\.(h|c|cpp|cu)$ ]]
	then
		echo "event: " $path $event $file
		#echo "?" >> $NAMED_PIPE
		TIMESTAMP=`date +%s`
		INTERVAL=$(($TIMESTAMP - $TIMESTAMP_LAST))
		echo "time elapsed since last time build: $INTERVAL"
		if [ $INTERVAL -gt 10 ]
		then
			echo -e "\e[1m\e[33mbuild\e[0m $BUILD_TARGET"
			echo "build $BUILD_TARGET" >> $NAMED_PIPE # WRITE build command to FIFO file
			 
			TIMESTAMP_LAST=$TIMESTAMP
		fi

		#echo <<EOF  >> /proc/$PID/fd/0
			#build $1
#EOF
	fi
done

# FIXME: writing to stdin file /proce/$PID/fd/0 doesn't work, why?
# how about writing tty file?
# use while to loop
#while $INOTIFYWAIT -re modify "$DIRECTORY"
#do
	#if [[ "$EVENT" =~ ".*\.(h|c|cpp|cu)" ]]
	#then
		#echo "event: $EVENT" |tee -a /dev/null
		#echo "build $1\n" |tee -a /proc/$PID/fd/0
		##echo "build $1\n" >> /proc/$PID/fd/0
		##ssh -t ficusromania 'bash -s' <<EOF
		##echo "build $1" >> /proc/$PID/fd/0
##EOF
	#fi
#done
